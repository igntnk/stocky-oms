// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (uuid, name, product_code, customer_cost)
VALUES ($1, $2, $3, $4)
    RETURNING uuid, name, product_code, customer_cost
`

type CreateProductParams struct {
	Uuid         pgtype.UUID
	Name         string
	ProductCode  pgtype.UUID
	CustomerCost pgtype.Numeric
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Uuid,
		arg.Name,
		arg.ProductCode,
		arg.CustomerCost,
	)
	var i Product
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ProductCode,
		&i.CustomerCost,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM product
WHERE uuid = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, uuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, uuid)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT uuid, name, product_code, customer_cost FROM product
WHERE product_code = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, productCode pgtype.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProduct, productCode)
	var i Product
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ProductCode,
		&i.CustomerCost,
	)
	return i, err
}

const getProductsByOrder = `-- name: GetProductsByOrder :many
SELECT p.uuid, p.name, p.product_code, p.customer_cost FROM product p
                    JOIN order_products op ON p.uuid = op.product_uuid
WHERE op.order_uuid = $1
`

func (q *Queries) GetProductsByOrder(ctx context.Context, orderUuid pgtype.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByOrder, orderUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.ProductCode,
			&i.CustomerCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT uuid, name, product_code, customer_cost FROM product
ORDER BY name
limit $1 offset $2
`

type ListProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.ProductCode,
			&i.CustomerCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET name = $2, product_code = $3, customer_cost = $4
WHERE uuid = $1
    RETURNING uuid, name, product_code, customer_cost
`

type UpdateProductParams struct {
	Uuid         pgtype.UUID
	Name         string
	ProductCode  pgtype.UUID
	CustomerCost pgtype.Numeric
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Uuid,
		arg.Name,
		arg.ProductCode,
		arg.CustomerCost,
	)
	var i Product
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ProductCode,
		&i.CustomerCost,
	)
	return i, err
}
