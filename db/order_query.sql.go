// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addProductToOrder = `-- name: AddProductToOrder :one
INSERT INTO order_products (
    product_uuid, order_uuid, result_price, amount
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING product_uuid, order_uuid, result_price, amount
`

type AddProductToOrderParams struct {
	ProductUuid pgtype.UUID
	OrderUuid   pgtype.UUID
	ResultPrice pgtype.Numeric
	Amount      int32
}

func (q *Queries) AddProductToOrder(ctx context.Context, arg AddProductToOrderParams) (OrderProduct, error) {
	row := q.db.QueryRow(ctx, addProductToOrder,
		arg.ProductUuid,
		arg.OrderUuid,
		arg.ResultPrice,
		arg.Amount,
	)
	var i OrderProduct
	err := row.Scan(
		&i.ProductUuid,
		&i.OrderUuid,
		&i.ResultPrice,
		&i.Amount,
	)
	return i, err
}

const calculateOrderTotal = `-- name: CalculateOrderTotal :one
SELECT SUM(result_price * amount) as total FROM order_products
WHERE order_uuid = $1
`

func (q *Queries) CalculateOrderTotal(ctx context.Context, orderUuid pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, calculateOrderTotal, orderUuid)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    uuid, comment, user_id, staff_id, order_cost
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING uuid, comment, user_id, staff_id, order_cost, creation_date, finish_date, status
`

type CreateOrderParams struct {
	Uuid      pgtype.UUID
	Comment   pgtype.Text
	UserID    pgtype.UUID
	StaffID   pgtype.UUID
	OrderCost pgtype.Numeric
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.Uuid,
		arg.Comment,
		arg.UserID,
		arg.StaffID,
		arg.OrderCost,
	)
	var i Order
	err := row.Scan(
		&i.Uuid,
		&i.Comment,
		&i.UserID,
		&i.StaffID,
		&i.OrderCost,
		&i.CreationDate,
		&i.FinishDate,
		&i.Status,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE uuid = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, uuid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrder, uuid)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT uuid, comment, user_id, staff_id, order_cost, creation_date, finish_date, status FROM orders
WHERE uuid = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, uuid pgtype.UUID) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, uuid)
	var i Order
	err := row.Scan(
		&i.Uuid,
		&i.Comment,
		&i.UserID,
		&i.StaffID,
		&i.OrderCost,
		&i.CreationDate,
		&i.FinishDate,
		&i.Status,
	)
	return i, err
}

const getOrderProducts = `-- name: GetOrderProducts :many
SELECT op.product_uuid, op.order_uuid, op.result_price, op.amount, p.name as product_name FROM order_products op
                                             JOIN product p ON op.product_uuid = p.uuid
WHERE op.order_uuid = $1
`

type GetOrderProductsRow struct {
	ProductUuid pgtype.UUID
	OrderUuid   pgtype.UUID
	ResultPrice pgtype.Numeric
	Amount      int32
	ProductName string
}

func (q *Queries) GetOrderProducts(ctx context.Context, orderUuid pgtype.UUID) ([]GetOrderProductsRow, error) {
	rows, err := q.db.Query(ctx, getOrderProducts, orderUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderProductsRow
	for rows.Next() {
		var i GetOrderProductsRow
		if err := rows.Scan(
			&i.ProductUuid,
			&i.OrderUuid,
			&i.ResultPrice,
			&i.Amount,
			&i.ProductName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT uuid, comment, user_id, staff_id, order_cost, creation_date, finish_date, status FROM orders
where status = $1
ORDER BY creation_date DESC
limit $2 offset $3
`

type ListOrdersParams struct {
	Status OrderStatus
	Limit  int32
	Offset int32
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.Uuid,
			&i.Comment,
			&i.UserID,
			&i.StaffID,
			&i.OrderCost,
			&i.CreationDate,
			&i.FinishDate,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromOrder = `-- name: RemoveProductFromOrder :exec
DELETE FROM order_products
WHERE product_uuid = $1 AND order_uuid = $2
`

type RemoveProductFromOrderParams struct {
	ProductUuid pgtype.UUID
	OrderUuid   pgtype.UUID
}

func (q *Queries) RemoveProductFromOrder(ctx context.Context, arg RemoveProductFromOrderParams) error {
	_, err := q.db.Exec(ctx, removeProductFromOrder, arg.ProductUuid, arg.OrderUuid)
	return err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET
    comment = COALESCE($2, comment),
    user_id = COALESCE($3, user_id),
    staff_id = COALESCE($4, staff_id),
    order_cost = COALESCE($5, order_cost),
    status = COALESCE($6, status),
    finish_date = CASE
                      WHEN $6 = 'completed' AND status != 'completed' THEN NOW()
                      WHEN $6 != 'completed' THEN NULL
                      ELSE finish_date
        END
WHERE uuid = $1
    RETURNING uuid, comment, user_id, staff_id, order_cost, creation_date, finish_date, status
`

type UpdateOrderParams struct {
	Uuid      pgtype.UUID
	Comment   pgtype.Text
	UserID    pgtype.UUID
	StaffID   pgtype.UUID
	OrderCost pgtype.Numeric
	Status    OrderStatus
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.Uuid,
		arg.Comment,
		arg.UserID,
		arg.StaffID,
		arg.OrderCost,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.Uuid,
		&i.Comment,
		&i.UserID,
		&i.StaffID,
		&i.OrderCost,
		&i.CreationDate,
		&i.FinishDate,
		&i.Status,
	)
	return i, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, finish_date = CASE WHEN $2 = 'completed' THEN NOW() ELSE finish_date END
WHERE uuid = $1
    RETURNING uuid, comment, user_id, staff_id, order_cost, creation_date, finish_date, status
`

type UpdateOrderStatusParams struct {
	Uuid   pgtype.UUID
	Status OrderStatus
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.Uuid, arg.Status)
	var i Order
	err := row.Scan(
		&i.Uuid,
		&i.Comment,
		&i.UserID,
		&i.StaffID,
		&i.OrderCost,
		&i.CreationDate,
		&i.FinishDate,
		&i.Status,
	)
	return i, err
}
